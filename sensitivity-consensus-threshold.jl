#final threshold range 0..1.0 at 0.01 increments? (very fast to test)
#block constant vs block gradient
#Fine band estimates vs coarse band estimates

#Subject should be the same as the pink noise trial
#common parameters
# - subject used
# - 85% denoising

#Test A block constant and fine bands

#Test B block gradient and fine bands (mostly ignorable IMO)

#Test C block gradient and coarse bands

#Test D block constant and coarse bands

#Setup experiment parameters
dB = 1
drange  =  data_range()[38:end]
sub_id  =  16 #ST7192
subject =  drange[sub_id]

include("misc.jl")

PyPlot.close("all")

#Supervised stage:
# - Load all non-experimental samples
# - Load all experimental samples
# - Generate the random forest model from training set
# - Perform Classification
# - save the classification result

#FF = Matrix{Float64}[]
#LL = Vector{Int}[]
#if(true)
#    for j=drange
#        if(j != "ST7221" && j != subject)
#            tmp = viewStuff(j, "physionet/", 0.85, false)
#            push!(LL, map(Int, tmp[1][:]))
#            push!(FF, tmp[2])
#        end
#    end
#end
#
##for i=1:length(EX)
##    figure(2000+i)
##    imshow(EX[i],aspect="auto",interpolation="none")
##end
#
#figure(1010101)
#model = build_forest(vcat(LL...), hcat(FF...)', 20, 40)
#PyPlot.close("all")

#Test A block constant and fine bands
#ttt = Any[]
#for i=0.0:0.01:1.0
#    push!(ttt, Any[i, viewStuff(subject, "physionet/", 0.85, false,
#    x_thresh=i)])
#end

#class_resultA = Vector{Int}[]
#for t=ttt
#    tmp = apply_forest(model, t[2][2]')
#    println("classification accuracy ", t[1], " ", mean(t[2][1].==tmp))
#    push!(class_resultA, tmp)
#end
#
##Test B block gradient and fine bands (mostly ignorable IMO)
#ttt = Any[]
#for i=0.0:0.01:1.0
#    push!(ttt, Any[i, viewStuff(subject, "physionet/", 0.85, true,
#    x_thresh=i)])
#end
#
#class_resultB = Vector{Int}[]
#for t=ttt
#    tmp = apply_forest(model, t[2][2]')
#    println("classification accuracy ", t[1], " ", mean(t[2][1].==tmp))
#    push!(class_resultB, tmp)
#end

##Test C block gradient and coarse bands
#ttt = Any[]
#for i=0.0:0.01:1.0
#    push!(ttt, Any[i, viewStuff(subject, "physionet/", 0.85, true,
#    x_thresh=i, y_thresh=0)])
#end
#
#class_resultC = Vector{Int}[]
#for t=ttt
#    tmp = apply_forest(model, t[2][2]')
#    println("classification accuracy ", t[1], " ", mean(t[2][1].==tmp))
#    push!(class_resultC, tmp)
#end

##Test D block constant and coarse bands
#ttt = Any[]
#for i=0.0:0.01:1.0
#    push!(ttt, Any[i, viewStuff(subject, "physionet/", 0.85, false,
#    x_thresh=i,y_thresh=0)])
#end
#
#class_resultD = Vector{Int}[]
#for t=ttt
#    tmp = apply_forest(model, t[2][2]')
#    println("classification accuracy ", t[1], " ", mean(t[2][1].==tmp))
#    push!(class_resultD, tmp)
#end

resA = [
0.0 0.8721109399075501
0.01 0.8721109399075501
0.02 0.8721109399075501
0.03 0.8721109399075501
0.04 0.8721109399075501
0.05 0.8721109399075501
0.06 0.8721109399075501
0.07 0.8721109399075501
0.08 0.8721109399075501
0.09 0.8721109399075501
0.1 0.8721109399075501
0.11 0.8721109399075501
0.12 0.8721109399075501
0.13 0.8721109399075501
0.14 0.8721109399075501
0.15 0.8721109399075501
0.16 0.8721109399075501
0.17 0.8721109399075501
0.18 0.8721109399075501
0.19 0.8721109399075501
0.2 0.8721109399075501
0.21 0.8721109399075501
0.22 0.8721109399075501
0.23 0.8721109399075501
0.24 0.8721109399075501
0.25 0.8721109399075501
0.26 0.8728813559322034
0.27 0.8728813559322034
0.28 0.8728813559322034
0.29 0.8728813559322034
0.3 0.8728813559322034
0.31 0.8728813559322034
0.32 0.8728813559322034
0.33 0.8728813559322034
0.34 0.8736517719568567
0.35 0.8736517719568567
0.36 0.8736517719568567
0.37 0.8736517719568567
0.38 0.8744221879815101
0.39 0.8736517719568567
0.4 0.8736517719568567
0.41 0.8736517719568567
0.42 0.8736517719568567
0.43 0.8721109399075501
0.44 0.8721109399075501
0.45 0.8721109399075501
0.46 0.8721109399075501
0.47 0.8721109399075501
0.48 0.8721109399075501
0.49 0.8721109399075501
0.5 0.8721109399075501
0.51 0.8697996918335902
0.52 0.8705701078582434
0.53 0.8705701078582434
0.54 0.8705701078582434
0.55 0.8705701078582434
0.56 0.8705701078582434
0.57 0.8705701078582434
0.58 0.8705701078582434
0.59 0.8705701078582434
0.6 0.8705701078582434
0.61 0.8705701078582434
0.62 0.8705701078582434
0.63 0.8705701078582434
0.64 0.8705701078582434
0.65 0.8705701078582434
0.66 0.8705701078582434
0.67 0.8705701078582434
0.68 0.8713405238828967
0.69 0.8713405238828967
0.7 0.8713405238828967
0.71 0.8721109399075501
0.72 0.8651771956856703
0.73 0.8651771956856703
0.74 0.8697996918335902
0.75 0.8697996918335902
0.76 0.8697996918335902
0.77 0.8705701078582434
0.78 0.8705701078582434
0.79 0.8705701078582434
0.8 0.8705701078582434
0.81 0.8705701078582434
0.82 0.8705701078582434
0.83 0.8697996918335902
0.84 0.8697996918335902
0.85 0.8690292758089369
0.86 0.8674884437596302
0.87 0.8674884437596302
0.88 0.8790446841294299
0.89 0.8813559322033898
0.9 0.8813559322033898
0.91 0.8813559322033898
0.92 0.8813559322033898
0.93 0.8813559322033898
0.94 0.8798151001540832
0.95 0.8728813559322034
0.96 0.8728813559322034
0.97 0.8667180277349769
0.98 0.8651771956856703
0.99 0.8436055469953775
1.0 0.600924499229584
]

resB = [
0.0 0.8852080123266564
0.01 0.8852080123266564
0.02 0.8852080123266564
0.03 0.8852080123266564
0.04 0.8852080123266564
0.05 0.8852080123266564
0.06 0.8852080123266564
0.07 0.8852080123266564
0.08 0.8852080123266564
0.09 0.8852080123266564
0.1 0.8852080123266564
0.11 0.8852080123266564
0.12 0.8852080123266564
0.13 0.8852080123266564
0.14 0.8852080123266564
0.15 0.8852080123266564
0.16 0.8852080123266564
0.17 0.8852080123266564
0.18 0.8852080123266564
0.19 0.8852080123266564
0.2 0.8852080123266564
0.21 0.8852080123266564
0.22 0.8852080123266564
0.23 0.8852080123266564
0.24 0.8852080123266564
0.25 0.8852080123266564
0.26 0.8852080123266564
0.27 0.8852080123266564
0.28 0.8852080123266564
0.29 0.8852080123266564
0.3 0.8852080123266564
0.31 0.8852080123266564
0.32 0.8852080123266564
0.33 0.8852080123266564
0.34 0.886748844375963
0.35 0.886748844375963
0.36 0.886748844375963
0.37 0.886748844375963
0.38 0.8875192604006163
0.39 0.886748844375963
0.4 0.886748844375963
0.41 0.886748844375963
0.42 0.886748844375963
0.43 0.8859784283513097
0.44 0.8859784283513097
0.45 0.8852080123266564
0.46 0.8852080123266564
0.47 0.8852080123266564
0.48 0.8852080123266564
0.49 0.8852080123266564
0.5 0.8852080123266564
0.51 0.8852080123266564
0.52 0.8859784283513097
0.53 0.8859784283513097
0.54 0.8859784283513097
0.55 0.8859784283513097
0.56 0.8859784283513097
0.57 0.8859784283513097
0.58 0.8859784283513097
0.59 0.8859784283513097
0.6 0.8852080123266564
0.61 0.8852080123266564
0.62 0.8852080123266564
0.63 0.8852080123266564
0.64 0.8852080123266564
0.65 0.8852080123266564
0.66 0.8852080123266564
0.67 0.8852080123266564
0.68 0.8852080123266564
0.69 0.884437596302003
0.7 0.884437596302003
0.71 0.884437596302003
0.72 0.8751926040061633
0.73 0.8751926040061633
0.74 0.8775038520801233
0.75 0.8775038520801233
0.76 0.8775038520801233
0.77 0.8782742681047766
0.78 0.8782742681047766
0.79 0.8782742681047766
0.8 0.8782742681047766
0.81 0.8798151001540832
0.82 0.8798151001540832
0.83 0.8782742681047766
0.84 0.8782742681047766
0.85 0.8790446841294299
0.86 0.8782742681047766
0.87 0.8775038520801233
0.88 0.8813559322033898
0.89 0.8821263482280431
0.9 0.8821263482280431
0.91 0.8821263482280431
0.92 0.8821263482280431
0.93 0.8821263482280431
0.94 0.8805855161787365
0.95 0.8790446841294299
0.96 0.8790446841294299
0.97 0.8775038520801233
0.98 0.8728813559322034
0.99 0.8551617873651772
1.0 0.6032357473035439
]

resC = [
0.0 0.8936825885978429
0.01 0.8959938366718028
0.02 0.8998459167950693
0.03 0.8967642526964561
0.04 0.9060092449922958
0.05 0.8944530046224961
0.06 0.8836671802773498
0.07 0.886748844375963
0.08 0.8983050847457628
0.09 0.8913713405238829
0.1 0.8944530046224961
0.11 0.886748844375963
0.12 0.8952234206471494
0.13 0.889060092449923
0.14 0.8936825885978429
0.15 0.8944530046224961
0.16 0.8906009244992296
0.17 0.8929121725731896
0.18 0.8959938366718028
0.19 0.8975346687211094
0.2 0.8959938366718028
0.21 0.9144838212634823
0.22 0.8944530046224961
0.23 0.899075500770416
0.24 0.8929121725731896
0.25 0.8983050847457628
0.26 0.8913713405238829
0.27 0.8929121725731896
0.28 0.8906009244992296
0.29 0.8983050847457628
0.3 0.8875192604006163
0.31 0.8921417565485362
0.32 0.8952234206471494
0.33 0.8975346687211094
0.34 0.8929121725731896
0.35 0.8936825885978429
0.36 0.8959938366718028
0.37 0.8959938366718028
0.38 0.899075500770416
0.39 0.8983050847457628
0.4 0.899075500770416
0.41 0.8913713405238829
0.42 0.8983050847457628
0.43 0.8967642526964561
0.44 0.8967642526964561
0.45 0.8936825885978429
0.46 0.8967642526964561
0.47 0.901386748844376
0.48 0.8998459167950693
0.49 0.8944530046224961
0.5 0.8944530046224961
0.51 0.9006163328197226
0.52 0.9006163328197226
0.53 0.9006163328197226
0.54 0.8959938366718028
0.55 0.899075500770416
0.56 0.8983050847457628
0.57 0.899075500770416
0.58 0.9036979969183359
0.59 0.8998459167950693
0.6 0.8959938366718028
0.61 0.8967642526964561
0.62 0.8967642526964561
0.63 0.8944530046224961
0.64 0.8998459167950693
0.65 0.9006163328197226
0.66 0.8967642526964561
0.67 0.8906009244992296
0.68 0.8952234206471494
0.69 0.8929121725731896
0.7 0.8913713405238829
0.71 0.889060092449923
0.72 0.8790446841294299
0.73 0.8798151001540832
0.74 0.8805855161787365
0.75 0.8813559322033898
0.76 0.8813559322033898
0.77 0.8744221879815101
0.78 0.8790446841294299
0.79 0.8828967642526965
0.8 0.8805855161787365
0.81 0.8852080123266564
0.82 0.8782742681047766
0.83 0.8828967642526965
0.84 0.8821263482280431
0.85 0.8813559322033898
0.86 0.8767334360554699
0.87 0.8821263482280431
0.88 0.8913713405238829
0.89 0.884437596302003
0.9 0.8852080123266564
0.91 0.8859784283513097
0.92 0.8821263482280431
0.93 0.8852080123266564
0.94 0.8975346687211094
0.95 0.8798151001540832
0.96 0.8767334360554699
0.97 0.8744221879815101
0.98 0.8721109399075501
0.99 0.8574730354391371
1.0 0.6016949152542372
]
resD = [
0.0 0.8944530046224961
0.01 0.8952234206471494
0.02 0.9036979969183359
0.03 0.9137134052388289
0.04 0.8998459167950693
0.05 0.9006163328197226
0.06 0.886748844375963
0.07 0.9006163328197226
0.08 0.9029275808936826
0.09 0.8967642526964561
0.1 0.9006163328197226
0.11 0.9006163328197226
0.12 0.8959938366718028
0.13 0.8967642526964561
0.14 0.8944530046224961
0.15 0.8944530046224961
0.16 0.8906009244992296
0.17 0.899075500770416
0.18 0.8959938366718028
0.19 0.8944530046224961
0.2 0.9029275808936826
0.21 0.8929121725731896
0.22 0.899075500770416
0.23 0.8813559322033898
0.24 0.899075500770416
0.25 0.8805855161787365
0.26 0.899075500770416
0.27 0.899075500770416
0.28 0.8983050847457628
0.29 0.899075500770416
0.3 0.8998459167950693
0.31 0.8983050847457628
0.32 0.899075500770416
0.33 0.9006163328197226
0.34 0.9029275808936826
0.35 0.8959938366718028
0.36 0.8983050847457628
0.37 0.9167950693374423
0.38 0.9036979969183359
0.39 0.8998459167950693
0.4 0.8983050847457628
0.41 0.8959938366718028
0.42 0.8898305084745762
0.43 0.8975346687211094
0.44 0.8975346687211094
0.45 0.8998459167950693
0.46 0.8859784283513097
0.47 0.8975346687211094
0.48 0.899075500770416
0.49 0.886748844375963
0.5 0.8975346687211094
0.51 0.9021571648690293
0.52 0.899075500770416
0.53 0.8959938366718028
0.54 0.8959938366718028
0.55 0.9006163328197226
0.56 0.9006163328197226
0.57 0.9021571648690293
0.58 0.9006163328197226
0.59 0.8959938366718028
0.6 0.8998459167950693
0.61 0.8983050847457628
0.62 0.901386748844376
0.63 0.9160246533127889
0.64 0.8944530046224961
0.65 0.9006163328197226
0.66 0.8967642526964561
0.67 0.8967642526964561
0.68 0.9006163328197226
0.69 0.9029275808936826
0.7 0.8952234206471494
0.71 0.8944530046224961
0.72 0.8813559322033898
0.73 0.8813559322033898
0.74 0.8828967642526965
0.75 0.8790446841294299
0.76 0.8852080123266564
0.77 0.8828967642526965
0.78 0.884437596302003
0.79 0.8828967642526965
0.8 0.884437596302003
0.81 0.8805855161787365
0.82 0.8813559322033898
0.83 0.884437596302003
0.84 0.8828967642526965
0.85 0.8828967642526965
0.86 0.886748844375963
0.87 0.8859784283513097
0.88 0.8828967642526965
0.89 0.8828967642526965
0.9 0.8929121725731896
0.91 0.8913713405238829
0.92 0.8944530046224961
0.93 0.8882896764252697
0.94 0.8828967642526965
0.95 0.8813559322033898
0.96 0.8813559322033898
0.97 0.8667180277349769
0.98 0.8705701078582434
0.99 0.8466872110939908
1.0 0.734206471494607]
#Train and test with config C
resE = [
0.0 0.9167950693374423
0.01 0.8906009244992296
0.02 0.8936825885978429
0.03 0.8975346687211094
0.04 0.8828967642526965
0.05 0.8944530046224961
0.06 0.8929121725731896
0.07 0.8875192604006163
0.08 0.8906009244992296
0.09 0.8913713405238829
0.1 0.8959938366718028
0.11 0.8906009244992296
0.12 0.8975346687211094
0.13 0.8936825885978429
0.14 0.8929121725731896
0.15 0.8952234206471494
0.16 0.911402157164869
0.17 0.8929121725731896
0.18 0.884437596302003
0.19 0.8929121725731896
0.2 0.889060092449923
0.21 0.8929121725731896
0.22 0.9006163328197226
0.23 0.8983050847457628
0.24 0.8921417565485362
0.25 0.8898305084745762
0.26 0.8959938366718028
0.27 0.8913713405238829
0.28 0.8975346687211094
0.29 0.8952234206471494
0.3 0.9006163328197226
0.31 0.8913713405238829
0.32 0.8983050847457628
0.33 0.899075500770416
0.34 0.8975346687211094
0.35 0.8998459167950693
0.36 0.8952234206471494
0.37 0.8952234206471494
0.38 0.8959938366718028
0.39 0.8959938366718028
0.4 0.8921417565485362
0.41 0.8936825885978429
0.42 0.8929121725731896
0.43 0.8936825885978429
0.44 0.8975346687211094
0.45 0.8952234206471494
0.46 0.8952234206471494
0.47 0.8944530046224961
0.48 0.9006163328197226
0.49 0.8983050847457628
0.5 0.8998459167950693
0.51 0.9021571648690293
0.52 0.8967642526964561
0.53 0.8975346687211094
0.54 0.899075500770416
0.55 0.9044684129429892
0.56 0.8975346687211094
0.57 0.9029275808936826
0.58 0.8975346687211094
0.59 0.9021571648690293
0.6 0.8998459167950693
0.61 0.899075500770416
0.62 0.8983050847457628
0.63 0.8975346687211094
0.64 0.901386748844376
0.65 0.8975346687211094
0.66 0.8983050847457628
0.67 0.8929121725731896
0.68 0.8952234206471494
0.69 0.8936825885978429
0.7 0.8952234206471494
0.71 0.8898305084745762
0.72 0.8821263482280431
0.73 0.8821263482280431
0.74 0.8898305084745762
0.75 0.8813559322033898
0.76 0.8798151001540832
0.77 0.884437596302003
0.78 0.8828967642526965
0.79 0.8813559322033898
0.8 0.8790446841294299
0.81 0.8798151001540832
0.82 0.8936825885978429
0.83 0.8821263482280431
0.84 0.8798151001540832
0.85 0.8798151001540832
0.86 0.8775038520801233
0.87 0.8790446841294299
0.88 0.8828967642526965
0.89 0.884437596302003
0.9 0.8821263482280431
0.91 0.8821263482280431
0.92 0.8813559322033898
0.93 0.884437596302003
0.94 0.884437596302003
0.95 0.8798151001540832
0.96 0.8767334360554699
0.97 0.8767334360554699
0.98 0.8728813559322034
0.99 0.8543913713405239
1.0 0.600924499229584
]

#modified C setup with lp solved 2d quad rather than
#solving 2 independent quad problems
resF = [
0.0 0.8998459167950693
0.01 0.8944530046224961
0.02 0.9029275808936826
0.03 0.9021571648690293
0.04 0.8959938366718028
0.05 0.8944530046224961
0.06 0.9006163328197226
0.07 0.8998459167950693
0.08 0.8952234206471494
0.09 0.8975346687211094
0.1 0.8952234206471494
0.11 0.8975346687211094
0.12 0.899075500770416
0.13 0.8944530046224961
0.14 0.899075500770416
0.15 0.8959938366718028
0.16 0.8952234206471494
0.17 0.901386748844376
0.18 0.8936825885978429
0.19 0.9006163328197226
0.2 0.8936825885978429
0.21 0.9006163328197226
0.22 0.8983050847457628
0.23 0.899075500770416
0.24 0.8936825885978429
0.25 0.889060092449923
0.26 0.8944530046224961
0.27 0.8967642526964561
0.28 0.8967642526964561
0.29 0.9006163328197226
0.3 0.8998459167950693
0.31 0.8975346687211094
0.32 0.8967642526964561
0.33 0.8998459167950693
0.34 0.8959938366718028
0.35 0.8998459167950693
0.36 0.8998459167950693
0.37 0.8952234206471494
0.38 0.9021571648690293
0.39 0.9029275808936826
0.4 0.899075500770416
0.41 0.9006163328197226
0.42 0.8983050847457628
0.43 0.8983050847457628
0.44 0.9029275808936826
0.45 0.8983050847457628
0.46 0.901386748844376
0.47 0.9021571648690293
0.48 0.9036979969183359
0.49 0.9029275808936826
0.5 0.8983050847457628
0.51 0.9006163328197226
0.52 0.9052388289676425
0.53 0.9044684129429892
0.54 0.9044684129429892
0.55 0.9060092449922958
0.56 0.8983050847457628
0.57 0.8998459167950693
0.58 0.899075500770416
0.59 0.9021571648690293
0.6 0.9006163328197226
0.61 0.901386748844376
0.62 0.9090909090909091
0.63 0.9029275808936826
0.64 0.9090909090909091
0.65 0.9006163328197226
0.66 0.9067796610169492
0.67 0.8998459167950693
0.68 0.9029275808936826
0.69 0.901386748844376
0.7 0.9006163328197226
0.71 0.8967642526964561
0.72 0.8929121725731896
0.73 0.889060092449923
0.74 0.8944530046224961
0.75 0.8959938366718028
0.76 0.8944530046224961
0.77 0.8952234206471494
0.78 0.8967642526964561
0.79 0.8944530046224961
0.8 0.8998459167950693
0.81 0.8983050847457628
0.82 0.8967642526964561
0.83 0.8913713405238829
0.84 0.886748844375963
0.85 0.889060092449923
0.86 0.8913713405238829
0.87 0.8898305084745762
0.88 0.8898305084745762
0.89 0.8944530046224961
0.9 0.8913713405238829
0.91 0.8936825885978429
0.92 0.8906009244992296
0.93 0.8944530046224961
0.94 0.8921417565485362
0.95 0.8936825885978429
0.96 0.8929121725731896
0.97 0.8936825885978429
0.98 0.8906009244992296
0.99 0.8690292758089369
1.0 0.6463790446841294

]

figure(1000);
PyPlot.clf();
plot(   resA[1:end-2,1],1.0-resA[1:end-2,2],color="r")
plot(   resB[1:end-2,1],1.0-resB[1:end-2,2],color="b")
plot(   resC[1:end-2,1],1.0-resC[1:end-2,2],color="g")
plot(   resD[1:end-2,1],1.0-resD[1:end-2,2],color="k")
plot(   resE[1:end-2,1],1.0-resF[1:end-2,2],color="m")
scatter(resA[1:end-2,1],1.0-resA[1:end-2,2],color="r")
scatter(resB[1:end-2,1],1.0-resB[1:end-2,2],color="b")
scatter(resC[1:end-2,1],1.0-resC[1:end-2,2],color="g")
scatter(resD[1:end-2,1],1.0-resD[1:end-2,2],color="k")
scatter(resE[1:end-2,1],1.0-resF[1:end-2,2],color="m")
axis([0,1,0,0.2])
nothing

#figure(1001)
#plot(class_resultD[50])
#figure(1001)
#plot(class_resultA[50]+0.1)
#figure(1001)
#plot(truth+0.2)

#Scratch Experiement to see what happens when stuff is trained and tested with 
#Configuration C
if(false)
    FF = Matrix{Float64}[]
    LL = Vector{Int}[]
    for j=drange
        if(j != "ST7221" && j != subject)
            tmp = viewStuff(j, "physionet/", 0.85, true, y_thresh=0)
            push!(LL, map(Int, tmp[1][:]))
            push!(FF, tmp[2])
        end
    end
    model_new = build_forest(vcat(LL...), hcat(FF...)', 20, 40)

    ttt = Any[]
    for i=0.0:0.01:1.0
        push!(ttt, Any[i, viewStuff(subject, "physionet/", 0.85, true,
        x_thresh=i, y_thresh=0)])
    end
    
    class_resultCC = Vector{Int}[]
    truth = nothing
    for t=ttt
        truth = t[2][1]
        tmp = apply_forest(model, t[2][2]')
        println("classification accuracy ", t[1], " ", mean(t[2][1].==tmp))
        push!(class_resultCC, tmp)
    end
    
end
#
##for i=1:length(EX)
##    figure(2000+i)
##    imshow(EX[i],aspect="auto",interpolation="none")
##end
#
#figure(1010101)
#model = build_forest(vcat(LL...), hcat(FF...)', 20, 40)
figure(1002)
title("Test C block gradient and coarse bands 85%")
tmp = viewStuff(subject, "physionet/", 0.85, true, x_thresh=0.5, y_thresh=0)
kk  = tmp[2]
#imshow(tmp[2],aspect="auto",interpolation="none", vmin=-5, vmax=16)
image_only_plot(kk,1002,-5,16, figname="type-c-85-percent-denoise.png")
println("domain = ", minimum(tmp[2]), " to ", maximum(tmp[2]))
figure(1003)
title("Test A block constant and fine bands 85%")
tmp = viewStuff(subject, "physionet/", 0.85, false, x_thresh=0.5, y_thresh=-1)
println("domain = ", minimum(tmp[2]), " to ", maximum(tmp[2]))
kk = tmp[2]
#imshow(tmp[2],aspect="auto",interpolation="none", vmin=-5, vmax=16)
image_only_plot(kk,1003,-5,16,figname="type-a-85-percent-denoise.png")
figure(1004)
title("Test C block gradient and coarse bands 100%")
tmp = viewStuff(subject, "physionet/", 1.00, true, x_thresh=0.5, y_thresh=0)
imshow(tmp[2],aspect="auto",interpolation="none", vmin=-5, vmax=16)
println("domain = ", minimum(tmp[2]), " to ", maximum(tmp[2]))
figure(1005)
title("Test A block constant and fine bands 100%")
tmp = viewStuff(subject, "physionet/", 1.00, false, x_thresh=0.5, y_thresh=-1)
println("domain = ", minimum(tmp[2]), " to ", maximum(tmp[2]))
imshow(tmp[2],aspect="auto",interpolation="none", vmin=-5, vmax=16)
figure(1006)
title("Raw")
tmp = viewStuff(subject, "physionet/", 0.00, false, x_thresh=0.5, y_thresh=-1)
kk=tmp[2]
println("domain = ", minimum(tmp[2]), " to ", maximum(tmp[2]))
#imshow(tmp[2],aspect="auto",interpolation="none", vmin=-5, vmax=16)
image_only_plot(kk,1006,-5,16,figname="type-any-0-percent-denoise.png")
tmp = viewStuff(subject, "physionet/", 0.85, true,  x_thresh=0.5)
kk  = tmp[2]
image_only_plot(kk,1007,-5,16,figname="type-b-85-percent-denoise.png")
tmp = viewStuff(subject, "physionet/", 0.85, false, x_thresh=0.5 ,y_thresh=0)
kk  = tmp[2]
image_only_plot(kk,1007,-5,16,figname="type-d-85-percent-denoise.png")

